@page "/calendar"
@using ClassLibrary.DTO
@using OMPMobileApp.Services

@inject ApiConnectionService<TaskDTO> ApiTaskService
@inject AuthorizationService AuthService
@inject NavigationManager Navigation

@if (isLoading)
{
        <div class="loading-container">
            <div class="spinner"></div>
            <p>Loading today's schedule...</p>
        </div>
}
else if (hasError)
{
        <div class="error-container">
            <div class="alert alert-danger">
                <svg class="alert-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <circle cx="12" cy="12" r="10"></circle>
                    <line x1="15" y1="9" x2="9" y2="15"></line>
                    <line x1="9" y1="9" x2="15" y2="15"></line>
                </svg>
                <strong>Error:</strong> @errorMessage
            </div>
            <button class="btn btn-primary" @onclick="LoadTodaysData">
                <svg class="btn-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <polyline points="23 4 23 10 17 10"></polyline>
                    <polyline points="1 20 1 14 7 14"></polyline>
                    <path d="m3.51 9a9 9 0 0 1 14.85-3.36L23 10M1 14l4.64 4.36A9 9 0 0 0 20.49 15"></path>
                </svg>
                Retry
            </button>
        </div>
}
else
{
        <div class="calendar-container">
            <div class="calendar-header">
                <button class="nav-btn" @onclick="PreviousDay" title="Previous Day">
                    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <polyline points="15,18 9,12 15,6"></polyline>
                    </svg>
                </button>
                <h2 class="current-date">@selectedDate.ToString("dddd, MMMM dd, yyyy")</h2>
                <button class="nav-btn" @onclick="NextDay" title="Next Day">
                    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <polyline points="9,18 15,12 9,6"></polyline>
                    </svg>
                </button>
            </div>

            <div class="today-indicator">
            @if (selectedDate.Date == DateTime.Today)
            {
                        <span class="today-badge">
                            <svg class="badge-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
                                <line x1="16" y1="2" x2="16" y2="6"></line>
                                <line x1="8" y1="2" x2="8" y2="6"></line>
                                <line x1="3" y1="10" x2="21" y2="10"></line>
                            </svg>
                            Today
                        </span>
            }
            else if (selectedDate.Date < DateTime.Today)
            {
                        <span class="past-badge">
                            <svg class="badge-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                <circle cx="12" cy="12" r="10"></circle>
                                <polyline points="12,6 12,12 16,14"></polyline>
                            </svg>
                            Past
                        </span>
            }
            else
            {
                        <span class="future-badge">
                            <svg class="badge-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                <circle cx="12" cy="12" r="10"></circle>
                                <polyline points="12,6 12,12 16,14"></polyline>
                            </svg>
                            Future
                        </span>
            }
            </div>

            <div class="appointments-container">
            @if (todaysAppointments?.Any() == true)
            {
                        <div class="appointments-list">
                    @foreach (var appointment in todaysAppointments.OrderBy(a => a.Start))
                    {
                                    <div class="appointment-card @GetAppointmentClass(appointment)">
                                        <div class="appointment-header">
                                            <div class="appointment-time">
                                                <svg class="time-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                                    <circle cx="12" cy="12" r="10"></circle>
                                                    <polyline points="12,6 12,12 16,14"></polyline>
                                                </svg>
                                    @appointment.Start.ToString("HH:mm")
                                    @if (appointment.End != appointment.Start)
                                    {
                                                        <span> - @appointment.End.ToString("HH:mm")</span>
                                    }
                                            </div>
                                            <div class="appointment-type-badge @appointment.Parent_Type.ToLower()">
                                    @if (appointment.Parent_Type == "Task")
                                    {
                                                        <svg class="type-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                                            <path d="m9 11 3 3 8-8"></path>
                                                            <path d="M21 12c0 4.97-4.03 9-9 9s-9-4.03-9-9 4.03-9 9-9"></path>
                                                        </svg>
                                    }
                                    else
                                    {
                                                        <svg class="type-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                                            <path d="M8 2v4"></path>
                                                            <path d="M16 2v4"></path>
                                                            <rect width="18" height="18" x="3" y="4" rx="2"></rect>
                                                            <path d="M3 10h18"></path>
                                                            <path d="M8 14h.01"></path>
                                                            <path d="M12 14h.01"></path>
                                                            <path d="M16 14h.01"></path>
                                                            <path d="M8 18h.01"></path>
                                                            <path d="M12 18h.01"></path>
                                                        </svg>
                                    }
                                    @appointment.Parent_Type
                                            </div>
                                        </div>
                                        <div class="appointment-content">
                                            <h4 class="appointment-title">@appointment.Text</h4>
                                @if (appointment.Parent_Type == "Task")
                                {
                                                    <div class="task-status">
                                        @if (appointment.CompletionTime != null)
                                        {
                                                                <span class="status-completed">
                                                                    <svg class="status-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                                                        <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path>
                                                                        <polyline points="22,4 12,14.01 9,11.01"></polyline>
                                                                    </svg>
                                                                    Completed
                                                                </span>
                                        }
                                        else if (appointment.End < DateTime.Now)
                                        {
                                                                <span class="status-overdue">
                                                                    <svg class="status-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                                                        <circle cx="12" cy="12" r="10"></circle>
                                                                        <line x1="12" y1="8" x2="12" y2="12"></line>
                                                                        <line x1="12" y1="16" x2="12.01" y2="16"></line>
                                                                    </svg>
                                                                    Overdue
                                                                </span>
                                        }
                                        else
                                        {
                                                                <span class="status-pending">
                                                                    <svg class="status-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                                                        <circle cx="12" cy="12" r="10"></circle>
                                                                        <polyline points="12,6 12,12 16,14"></polyline>
                                                                    </svg>
                                                                    Pending
                                                                </span>
                                        }
                                                    </div>
                                }
                                        </div>
                                    </div>
                    }
                        </div>
            }
            else
            {
                        <div class="empty-day">
                            <svg class="empty-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5">
                                <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
                                <line x1="16" y1="2" x2="16" y2="6"></line>
                                <line x1="8" y1="2" x2="8" y2="6"></line>
                                <line x1="3" y1="10" x2="21" y2="10"></line>
                            </svg>
                            <h3>No appointments for this day</h3>
                            <p>Your schedule is clear!</p>
                        </div>
            }
            </div>

            <div class="quick-actions">
                <button class="btn-icon btn-today" @onclick="GoToToday" title="Go to Today">
                    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <path d="m3 9 9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"></path>
                        <polyline points="9,22 9,12 15,12 15,22"></polyline>
                    </svg>
                </button>
                <button class="btn-icon btn-refresh" @onclick="LoadTodaysData" title="Refresh">
                    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <polyline points="23 4 23 10 17 10"></polyline>
                        <polyline points="1 20 1 14 7 14"></polyline>
                        <path d="m3.51 9a9 9 0 0 1 14.85-3.36L23 10M1 14l4.64 4.36A9 9 0 0 0 20.49 15"></path>
                    </svg>
                </button>
                <button class="btn-icon btn-back" @onclick="GoBack" title="Back">
                    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <polyline points="15,18 9,12 15,6"></polyline>
                        <line x1="3" y1="12" x2="21" y2="12"></line>
                    </svg>
                </button>
            </div>
        </div>
}

<style>
    .calendar-container {
        padding: 24px;
        max-width: 900px;
        margin: 0 auto;
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', sans-serif;
        background: #f8fafc;
        min-height: 100vh;
    }

    .loading-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        height: 100vh;
        gap: 24px;
        background: #f8fafc;
    }

    .spinner {
        border: 3px solid #e2e8f0;
        border-top: 3px solid #3b82f6;
        border-radius: 50%;
        width: 48px;
        height: 48px;
        animation: spin 1s linear infinite;
    }

    .error-container {
        padding: 24px;
        text-align: center;
        max-width: 500px;
        margin: 0 auto;
    }

    .alert {
        display: flex;
        align-items: center;
        gap: 12px;
        padding: 16px 20px;
        border-radius: 12px;
        margin-bottom: 20px;
        font-size: 0.95rem;
    }

    .alert-danger {
        background: #fef2f2;
        border: 1px solid #fecaca;
        color: #dc2626;
    }

    .alert-icon {
        width: 20px;
        height: 20px;
        flex-shrink: 0;
    }

    .calendar-header {
        display: flex;
        align-items: center;
        justify-content: space-between;
        margin-bottom: 24px;
        padding: 20px;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border-radius: 16px;
        color: white;
        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
    }

    .nav-btn {
        background: rgba(255, 255, 255, 0.15);
        border: none;
        border-radius: 12px;
        width: 44px;
        height: 44px;
        color: white;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all 0.2s ease;
        backdrop-filter: blur(10px);
    }

        .nav-btn:hover {
            background: rgba(255, 255, 255, 0.25);
            transform: scale(1.05);
        }

        .nav-btn svg {
            width: 20px;
            height: 20px;
        }

    .current-date {
        margin: 0;
        font-size: 1.6rem;
        font-weight: 600;
        text-align: center;
        letter-spacing: -0.025em;
    }

    .today-indicator {
        text-align: center;
        margin-bottom: 28px;
    }

    .today-badge, .past-badge, .future-badge {
        display: inline-flex;
        align-items: center;
        gap: 8px;
        padding: 8px 20px;
        border-radius: 24px;
        font-size: 0.875rem;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .badge-icon {
        width: 16px;
        height: 16px;
    }

    .today-badge {
        background: linear-gradient(45deg, #ff6b6b, #ffa726);
        color: white;
    }

    .past-badge {
        background: #64748b;
        color: white;
    }

    .future-badge {
        background: linear-gradient(45deg, #4ecdc4, #44a08d);
        color: white;
    }

    .appointments-container {
        min-height: 400px;
        margin-bottom: 32px;
    }

    .appointments-list {
        display: flex;
        flex-direction: column;
        gap: 16px;
    }

    .appointment-card {
        background: white;
        border-radius: 16px;
        padding: 24px;
        box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);
        border-left: 4px solid #3b82f6;
        transition: all 0.3s ease;
        border: 1px solid #e2e8f0;
    }

        .appointment-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
        }

        .appointment-card.task-pending {
            border-left-color: #f59e0b;
            background: linear-gradient(135deg, #fff 0%, #fffbeb 100%);
        }

        .appointment-card.task-overdue {
            border-left-color: #ef4444;
            background: linear-gradient(135deg, #fff 0%, #fef2f2 100%);
        }

        .appointment-card.task-completed {
            border-left-color: #10b981;
            background: linear-gradient(135deg, #fff 0%, #f0fdf4 100%);
        }

        .appointment-card.meeting {
            border-left-color: #8b5cf6;
            background: linear-gradient(135deg, #fff 0%, #faf5ff 100%);
        }

    .appointment-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 16px;
    }

    .appointment-time {
        display: flex;
        align-items: center;
        gap: 8px;
        font-size: 1.1rem;
        font-weight: 700;
        color: #1e293b;
    }

    .time-icon {
        width: 18px;
        height: 18px;
        color: #64748b;
    }

    .appointment-type-badge {
        display: flex;
        align-items: center;
        gap: 6px;
        padding: 6px 16px;
        border-radius: 20px;
        font-size: 0.8rem;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .type-icon {
        width: 14px;
        height: 14px;
    }

        .appointment-type-badge.task {
            background: #f59e0b;
            color: white;
        }

        .appointment-type-badge.meeting {
            background: #8b5cf6;
            color: white;
        }

    .appointment-title {
        margin: 0 0 12px 0;
        font-size: 1.25rem;
        color: #1e293b;
        line-height: 1.4;
        font-weight: 600;
    }

    .task-status {
        margin-top: 12px;
    }

    .status-completed, .status-overdue, .status-pending {
        display: inline-flex;
        align-items: center;
        gap: 6px;
        font-weight: 600;
        font-size: 0.875rem;
    }

    .status-icon {
        width: 16px;
        height: 16px;
    }

    .status-completed {
        color: #10b981;
    }

    .status-overdue {
        color: #ef4444;
    }

    .status-pending {
        color: #f59e0b;
    }

    .empty-day {
        text-align: center;
        padding: 80px 20px;
        color: #64748b;
        background: white;
        border-radius: 16px;
        border: 2px dashed #e2e8f0;
    }

    .empty-icon {
        width: 80px;
        height: 80px;
        color: #cbd5e1;
        margin: 0 auto 24px;
    }

    .empty-day h3 {
        margin: 0 0 12px 0;
        color: #475569;
        font-size: 1.25rem;
        font-weight: 600;
    }

    .empty-day p {
        margin: 0;
        font-size: 1rem;
    }

    .quick-actions {
        display: flex;
        gap: 16px;
        justify-content: center;
        align-items: center;
    }

    .btn-icon {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 56px;
        height: 56px;
        border: none;
        border-radius: 16px;
        cursor: pointer;
        transition: all 0.3s ease;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        backdrop-filter: blur(10px);
    }

        .btn-icon svg {
            width: 20px;
            height: 20px;
            transition: transform 0.2s ease;
        }

        .btn-icon:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
        }

            .btn-icon:hover svg {
                transform: scale(1.1);
            }

        .btn-icon:active {
            transform: translateY(0);
        }

    .btn-today {
        background: linear-gradient(135deg, #667eea, #764ba2);
        color: white;
    }

    .btn-refresh {
        background: linear-gradient(135deg, #4ecdc4, #44a08d);
        color: white;
    }

    .btn-back {
        background: linear-gradient(135deg, #ff6b6b, #ffa726);
        color: white;
    }

    .btn {
        display: inline-flex;
        align-items: center;
        gap: 8px;
        padding: 12px 24px;
        border: none;
        border-radius: 12px;
        font-size: 1rem;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.2s ease;
    }

    .btn-icon {
        width: 18px;
        height: 18px;
    }

    .btn-primary {
        background: linear-gradient(135deg, #3b82f6, #1d4ed8);
        color: white;
    }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(59, 130, 246, 0.4);
        }

  

        .appointment-card {
            padding: 20px 16px;
        }

        .appointment-header {
            flex-direction: column;
            align-items: flex-start;
            gap: 12px;
        }

        .current-date {
            font-size: 1.3rem;
        }

        .quick-actions {
            gap: 12px;
        }

        .btn-icon {
            width: 48px;
            height: 48px;
        }

            .btn-icon svg {
                width: 18px;
                height: 18px;
            }
    }
</style>

@code {
    DateTime selectedDate = DateTime.Today;
    IList<Appointment> todaysAppointments = new List<Appointment>();
    bool isLoading = true;
    bool hasError = false;
    string errorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadTodaysData();
    }

    private async Task LoadTodaysData()
    {
        try
        {
            isLoading = true;
            hasError = false;
            errorMessage = "";
            StateHasChanged();

            await Task.Delay(100);

            if (AuthService?.userDTO?.Id == null || AuthService.userDTO.Id <= 0)
            {
                throw new InvalidOperationException("User not authenticated. Please log in again.");
            }

            var dateString = selectedDate.ToString("yyyy-MM-dd");
            var tasks = await ApiTaskService.GetResources($"/api/Task/GetByUserAndDate/{AuthService.userDTO.Id}/{dateString}");

            var appointments = new List<Appointment>();

            if (tasks != null && tasks.Any())
            {
                foreach (var item in tasks)
                {
                    if (item.DeadlineTime == default || string.IsNullOrWhiteSpace(item.Title))
                        continue;

                    if (item.DeadlineTime.Date == selectedDate.Date)
                    {
                        appointments.Add(new Appointment
                            {
                                Parent_Type = item.IsMeeting ? "Meeting" : "Task",
                                Parent_Id = item.Id,
                                Start = item.DeadlineTime,
                                End = item.DeadlineTime.AddMinutes(item.IsMeeting ? 60 : 30),
                                CompletionTime = item.CompletionTime,
                                Text = item.Title
                            });
                    }
                }
            }

            todaysAppointments = appointments;
            isLoading = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            isLoading = false;
            hasError = true;
            errorMessage = $"Failed to load schedule: {ex.Message}";
            StateHasChanged();
        }
    }

    void GoBack()
    {
        Navigation.NavigateTo("/");
    }

    private async Task PreviousDay()
    {
        selectedDate = selectedDate.AddDays(-1);
        await LoadTodaysData();
    }

    private async Task NextDay()
    {
        selectedDate = selectedDate.AddDays(1);
        await LoadTodaysData();
    }

    private async Task GoToToday()
    {
        selectedDate = DateTime.Today;
        await LoadTodaysData();
    }

    private string GetAppointmentClass(Appointment appointment)
    {
        if (string.IsNullOrEmpty(appointment.Parent_Type))
            return "";

        if (appointment.Parent_Type == "Task")
        {
            if (appointment.CompletionTime != null)
                return "task-completed";
            else if (appointment.End < DateTime.Now)
                return "task-overdue";
            else
                return "task-pending";
        }
        else if (appointment.Parent_Type == "Meeting")
        {
            return "meeting";
        }

        return "";
    }

    public class Appointment
    {
        public DateTime Start { get; set; }
        public DateTime End { get; set; }
        public string Parent_Type { get; set; } = "";
        public int Parent_Id { get; set; }
        public DateTime? CompletionTime { get; set; }
        public string Text { get; set; } = "";
    }
}