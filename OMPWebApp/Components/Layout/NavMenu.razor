@using ClassLibrary.DTO
@using OMPWebApp.Components.Pages
@using OMPWebApp.Services
@using Radzen.Blazor.Rendering

@inject AuthorizationService AuthorizationService
@inject ApiConnectionService<GroupDTO> ApiGroupService
@inject ApiConnectionService<SpecialGroupDTO> ApiSpecialGroupService
@inject ApiConnectionService<NotificationDTO> ApiNotificationService
@inject ApiConnectionService<ModuleDTO> ApiModuleService
@inject DialogService DialogService

<RadzenHeader>
    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Style="width: 100%;">
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0">
            <RadzenSidebarToggle Click="@(() => sidebarExpanded = !sidebarExpanded)" />
            <RadzenLabel Text="OMP" Style="margin-right: 10px" />
        </RadzenStack>

        <RadzenLabel Text="@AuthorizationService.userDTO.CompanyName" />
        <RadzenLabel Text="@AuthorizationService.userDTO.Role" />
        <div class="rz-text-align-center" style="margin-left: auto; margin-right: 1rem;">
            <RadzenProfileMenu @ref=button Click="@ProfileMenuClick">
                <Template>
                    <RadzenText Style="color:white; margin-top:10px">@AuthorizationService.userDTO.Name @AuthorizationService.userDTO.Surname</RadzenText>
                </Template>
                <ChildContent>
                    <RadzenProfileMenuItem Text="Profile" Icon="account_circle"></RadzenProfileMenuItem>
                    <RadzenProfileMenuItem Text="Notifications" Icon="assignment_late"></RadzenProfileMenuItem>
                    <RadzenProfileMenuItem Text="Logout" Icon="line_weight"></RadzenProfileMenuItem>
                </ChildContent>
            </RadzenProfileMenu>
        </div>
    </RadzenStack>
</RadzenHeader>
<RadzenSidebar Responsive="false" Style="width: max-content">
    <RadzenPanelMenu DisplayStyle="@(sidebarExpanded ? MenuItemDisplayStyle.IconAndText : MenuItemDisplayStyle.Icon)" ShowArrow="false">

        <div onclick="document.querySelector('.navbar-toggler').click()">

            <NavLink style="text-decoration: none; color:black;" href="" Match="NavLinkMatch.All">
                <RadzenPanelMenuItem Text="Home" Icon="home" />
            </NavLink>

            @if (AuthorizationService.userDTO.Role == "Manager")
            {

                <RadzenPanelMenuItem Text="Manager Panel" Icon="auto_awesome">
                    <NavLink style="text-decoration: none;" href="useradmin" Match="NavLinkMatch.All">
                        <RadzenPanelMenuItem Text="Company Users" Icon="pageview" />
                    </NavLink>

                    <NavLink style="text-decoration: none;" href="groups" Match="NavLinkMatch.All">
                        <RadzenPanelMenuItem Text="Company Groups" Icon="pageview" />
                    </NavLink>

                    <NavLink style="text-decoration: none;" href="special_groups" Match="NavLinkMatch.All">
                        <RadzenPanelMenuItem Text="Company Special Groups" Icon="pageview" />
                    </NavLink>

                    <NavLink style="text-decoration: none;" href="constants" Match="NavLinkMatch.All">
                        <RadzenPanelMenuItem Text="Company Constants" Icon="pageview" />
                    </NavLink>

                </RadzenPanelMenuItem>

            }

            <RadzenPanelMenuItem Text="Groups" Icon="dashboard" Click="@LoadData">
                @foreach (GroupDTO group in groups)
                {
                    <NavLink style="text-decoration: none;" href="@($"group/{group.Id}")" Match="NavLinkMatch.All">
                        <RadzenPanelMenuItem Text="@group.Title" Icon="bookmark" />
                    </NavLink>
                }
            </RadzenPanelMenuItem>

            <RadzenPanelMenuItem Text="Special Groups" Icon="dashboard" Click="@LoadData">
                @foreach (SpecialGroupDTO group in specialgroups)
                {
                    <NavLink style="text-decoration: none;" href="@($"specialgroup/{group.Id}")" Match="NavLinkMatch.All">
                        <RadzenPanelMenuItem Text="@group.Title" Icon="bookmark" />
                    </NavLink>
                }
            </RadzenPanelMenuItem>

            @if (modules.Any(m => m.Id == 1))
            {
                <RadzenPanelMenuItem Text="@modules.Where(m => m.Id == 1).FirstOrDefault().Name" Icon="dashboard" >
                    <RadzenPanelMenuItem Text="Financial Constants" Icon="dashboard" class="PMIinide">
                        <NavLink style="text-decoration: none;" href="fm_tax_rates" Match="NavLinkMatch.All">
                            <RadzenPanelMenuItem Text="Tax Rates" Icon="pageview" />
                        </NavLink>

                        <NavLink style="text-decoration: none;" href="fm_contracts" Match="NavLinkMatch.All">
                            <RadzenPanelMenuItem Text="Contract types" Icon="pageview" />
                        </NavLink>

                        <NavLink style="text-decoration: none;" href="fm_currencies" Match="NavLinkMatch.All">
                            <RadzenPanelMenuItem Text="Currencies" Icon="pageview" />
                        </NavLink>
                    </RadzenPanelMenuItem>

                    <RadzenPanelMenuItem Text="Invoices, Debit Notes & Payroll" Icon="dashboard">
                        <NavLink style="text-decoration: none;" href="fm_invoiceincome" Match="NavLinkMatch.All">
                            <RadzenPanelMenuItem Text="Income Invoice" Icon="pageview" />
                        </NavLink>

                        <NavLink style="text-decoration: none;" href="fm_invoicecost" Match="NavLinkMatch.All">
                            <RadzenPanelMenuItem Text="Cost Invoice " Icon="pageview" />
                        </NavLink>

                        <NavLink style="text-decoration: none;" href="fm_payroll" Match="NavLinkMatch.All">
                            <RadzenPanelMenuItem Text="Payroll" Icon="pageview" />
                        </NavLink>

                        <NavLink style="text-decoration: none;" href="fm_debitnote" Match="NavLinkMatch.All">
                            <RadzenPanelMenuItem Text="Debit Note" Icon="pageview" />
                        </NavLink>
                    </RadzenPanelMenuItem>

                    <NavLink style="text-decoration: none;" href="fm_summary" Match="NavLinkMatch.All">
                        <RadzenPanelMenuItem Text="Summary" Icon="pageview" />
                    </NavLink>
                </RadzenPanelMenuItem>
            }
        </div>
    </RadzenPanelMenu>
</RadzenSidebar>

<Popup @ref=popup Lazy="true" class="my-popup">
    <RadzenStack Orientation="Orientation.Vertical" Gap="0" class="rz-h-100">
        <!-- Header -->
        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween"
                     Class="popup-header" AlignItems="AlignItems.Center">
            <RadzenText TextStyle="TextStyle.H6" Class="mb-0 popup-title">Notifications</RadzenText>
        </RadzenStack>

        <!-- Content -->
        @if (notifications != null && notifications.Count == 0)
        {
            <RadzenStack AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center"
                         Class="empty-state">
                <RadzenIcon Icon="notifications_off" Class="empty-icon" />
                <RadzenText TextStyle="TextStyle.Body1" Class="empty-text">No notifications</RadzenText>
            </RadzenStack>
        }
        else if (notifications != null)
        {
            <RadzenDataList AllowVirtualization="true" Data="@notifications" Class="notification-list">
                <Template Context="notification">
                    <div class="notification-item @(notification.IsSeen ? "seen" : "unseen")">
                        <div class="notification-content">
                            <div class="notification-header">
                                <RadzenIcon Icon="announcement" Class="notification-icon" />
                                <RadzenText TextStyle="TextStyle.Subtitle2" Class="notification-source">
                                    @notification.NotificationSource
                                </RadzenText>
                            </div>
                            <RadzenText TextStyle="TextStyle.Body2" Class="notification-text">
                                @notification.NotificationText
                            </RadzenText>
                            <RadzenText TextStyle="TextStyle.Caption" Class="notification-date">
                                @notification.CreationDate.ToString("MMM dd, yyyy HH:mm")
                            </RadzenText>
                        </div>
                        <div class="notification-actions">
                            @if (!notification.IsSeen)
                            {
                                <RadzenButton ButtonStyle="ButtonStyle.Light" Icon="visibility"
                                              Click="@(() => MarkAsRead(notification))"
                                              Size="ButtonSize.Small" Class="action-btn" />
                            }
                            <RadzenButton ButtonStyle="ButtonStyle.Light" Icon="delete"
                                          Click="@(() => DeleteNotification(notification))"
                                          Size="ButtonSize.Small" Class="action-btn delete-btn" />
                        </div>
                    </div>
                </Template>
            </RadzenDataList>
        }
        else
        {
            <div class="loading-state">
                <RadzenProgressBarCircular ShowValue="false" Size="ProgressBarCircularSize.Small" />
                <RadzenText TextStyle="TextStyle.Body2" Class="loading-text">Loading notifications...</RadzenText>
            </div>
        }
    </RadzenStack>
</Popup>

<style>
    .my-popup {
        display: none;
        position: absolute;
        overflow: hidden;
        height: 300px;
        width: 400px;
        border: var(--rz-panel-border);
        background-color: var(--rz-panel-background-color);
        box-shadow: var(--rz-shadow-4);
        border-radius: var(--rz-border-radius);
        backdrop-filter: blur(10px);
    }

    /* Header */
    .popup-header {
        background: linear-gradient(135deg, var(--rz-primary), var(--rz-primary-dark));
        padding: 1rem 1.25rem;
        border-bottom: 1px solid var(--rz-border-color);
    }

    .popup-title {
        color: white !important;
        font-weight: 600;
        letter-spacing: 0.025em;
    }

    /* Empty State */
    .empty-state {
        flex: 1;
        padding: 2rem;
        min-height: 200px;
    }

    .empty-icon {
        font-size: 3rem;
        color: var(--rz-text-tertiary-color);
        margin-bottom: 0.5rem;
        opacity: 0.7;
    }

    .empty-text {
        color: var(--rz-text-secondary-color);
        font-weight: 500;
    }

    /* Loading State */
    .loading-state {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 2rem;
        gap: 1rem;
    }

    .loading-text {
        color: var(--rz-text-secondary-color);
    }

    /* Notification List */
    .notification-list {
        flex: 1;
        overflow: auto;
        max-height: 400px;
        scrollbar-width: thin;
        scrollbar-color: var(--rz-border-color) transparent;
        padding: 0;
    }

        .notification-list::-webkit-scrollbar {
            width: 6px;
        }

        .notification-list::-webkit-scrollbar-thumb {
            background-color: var(--rz-border-color);
            border-radius: 3px;
            transition: background-color 0.2s;
        }

            .notification-list::-webkit-scrollbar-thumb:hover {
                background-color: var(--rz-text-tertiary-color);
            }

        .notification-list::-webkit-scrollbar-track {
            background: transparent;
        }

        .notification-list .rz-datalist-data li {
            padding: 0 !important;
        }
    /* Notification Items */
    .notification-item {
        display: flex;
        align-items: flex-start;
        gap: 0.75rem;
        padding: 1rem; /* Add padding back to individual items */
        border-bottom: 1px solid var(--rz-border-color-light);
        transition: all 0.2s ease;
        position: relative;
    }


        .notification-item:hover {
            background-color: var(--rz-base-50);
        }

        .notification-item.unseen::before {
            content: '';
            position: absolute;
            left: 0;
            top: 0;
            bottom: 0;
            width: 3px;
            background: linear-gradient(to bottom, var(--rz-primary), var(--rz-primary-light));
        }

        .notification-item.unseen {
            background-color: var(--rz-primary-lighter);
        }

    .notification-content {
        flex: 1;
        display: flex;
        flex-direction: column;
        gap: 0.25rem;
    }

    .notification-header {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        margin-bottom: 0.25rem;
    }

    .notification-icon {
        color: var(--rz-primary);
        font-size: 1.1rem;
    }

    .notification-source {
        font-weight: 600;
        color: var(--rz-text-color);
    }

    .notification-item.unseen .notification-source {
        color: var(--rz-primary-dark);
    }

    .notification-text {
        color: var(--rz-text-secondary-color);
        line-height: 1.4;
        margin-bottom: 0.25rem;
    }

    .notification-date {
        color: var(--rz-text-tertiary-color);
        font-size: 0.8rem;
    }

    /* Actions */
    .notification-actions {
        display: flex;
        flex-direction: column;
        gap: 0.25rem;
        opacity: 0.7;
        transition: opacity 0.2s;
    }

    .notification-item:hover .notification-actions {
        opacity: 1;
    }

    .action-btn {
        width: 2rem !important;
        height: 2rem !important;
        min-width: 2rem !important;
        padding: 0 !important;
        border-radius: 50% !important;
        transition: all 0.2s ease;
    }

        .action-btn:hover {
            transform: scale(1.05);
            box-shadow: var(--rz-shadow-2);
        }

    .delete-btn:hover {
        background-color: var(--rz-danger-lighter) !important;
        color: var(--rz-danger) !important;
    }

    /* Responsive adjustments */

    .notification-item {
        padding: 0.875rem 1rem;
    }

    .popup-header {
        padding: 0.875rem 1rem;
    }

    }
</style>
@code {
    bool sidebarExpanded = true;
    List<GroupDTO> groups = new();
    List<SpecialGroupDTO> specialgroups = new();
    List<ModuleDTO> modules = new();

    private RadzenProfileMenu button;
    private Popup popup;
    private bool showNotifications;
    private List<NotificationDTO> notifications = new();
    private int unreadCount = 0;

    protected override async Task OnInitializedAsync()
    {
        notifications = new();
        showNotifications = false;
        await LoadData();
        await LoadNotifications();
    }

    private async Task LoadData()
    {
        groups = await ApiGroupService.GetResources($"/api/Group/GetByUser/{AuthorizationService.userDTO.Id}");
        specialgroups = await ApiSpecialGroupService.GetResources($"/api/SpecialGroup/GetByCustomer/{AuthorizationService.userDTO.CustomerId}");
        modules = await ApiModuleService.GetResources($"/api/Module/GetByCustomer/{AuthorizationService.userDTO.CustomerId}");

    }

    public async Task NewProfileDialog()
    {
        await DialogService.OpenAsync<ProfileDialog>
        (
            "Profile",
            new Dictionary<string, object>
                        {
                { "User", AuthorizationService.userDTO }
                        },
            new DialogOptions()
                {
                    Width = "700px",
                    Height = "512px"
                });
    }


    public async Task ProfileMenuClick(RadzenProfileMenuItem item)
    {
        switch (item.Text)
        {
            case "Profile":
                await NewProfileDialog();
                break;
            case "Logout":
                await AuthorizationService.Logoff();
                break;
            case "Notifications":
                await popup.ToggleAsync(button.Element);
                break;
        }
    }

    
    private async Task LoadNotifications()
    {
        try
        {
            notifications = await ApiNotificationService.GetResources($"/api/Notification/GetByUser/{AuthorizationService.userDTO.Id}");
            // Sort notifications with unread first, then by creation date (newest first)
            notifications = notifications
                .Where(n => !n.IsDeleted)
                .OrderByDescending(n => !n.IsSeen)
                .ThenByDescending(n => n.CreationDate)
                .ToList();
                
            unreadCount = notifications.Count(n => !n.IsSeen);
        }
        catch (Exception ex)
        {
            // Handle exception
            Console.WriteLine($"Error loading notifications: {ex.Message}");
        }
    }

    private async Task MarkAsRead(NotificationDTO notification)
    {
        notification.IsSeen = true;
        await ApiNotificationService.ExecuteGetRequest($"/api/Notification/Seen/{notification.Id}");
        await LoadNotifications();
    }

    private async Task DeleteNotification(NotificationDTO notification)
    {
        await ApiNotificationService.ExecuteGetRequest($"/api/Notification/DeleteById/{notification.Id}");
        await LoadNotifications();
    }
}