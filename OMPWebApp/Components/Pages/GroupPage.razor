@page "/group/{groupId:int}"

@using ClassLibrary.DTO
@using OMPWebApp.Services
@using Radzen
@using Microsoft.AspNetCore.SignalR.Client
@inject DialogService DialogService
@inject ApiConnectionService<UserDTO> ApiServiceUser
@inject ApiConnectionService<TaskDTO> ApiServiceTask
@inject ApiConnectionService<GroupDTO> ApiServiceGroup
@inject AuthorizationService AuthService
@inject HttpClient Http
@inject NavigationManager NavigationManager

<style>
    .chat-box {
        flex: 1;
        overflow-y: auto;
        padding: 0.5rem;
        background-color: #f4f4f4;
        border-radius: 6px;
        margin-bottom: 0.5rem;
        display: flex;
        flex-direction: column;
    }

    .chat-message {
        display: flex;
        flex-direction: column;
        margin: 0.25rem 0;
        max-width: 75%;
    }

        .chat-message.other {
            align-self: flex-start;
            text-align: justify;
        }

        .chat-message.self {
            align-self: flex-end;
            text-align: justify;
        }

    .message-bubble {
        background-color: #d1e7dd;
        padding: 0.5rem 0.75rem;
        border-radius: 1rem;
        display: inline-block;
        word-break: break-word;
        max-width: 100%;
    }

    .chat-message.self .message-bubble {
        background-color: #bee5eb;
    }

    .message-meta {
        font-size: 0.75rem;
        opacity: 0.6;
        margin-top: 2px;
    }
</style>

<RadzenCard Style="height: 80vh;">
    <h3>@Group.Title</h3>
    <RadzenRow Style="height: calc(100% - 3rem); overflow: hidden;">

        <!-- Members -->
        <RadzenColumn Size="2" Style="overflow-y: auto; height: 100%;">
            <h5>Group Members</h5>
            <RadzenDataList class="names" Data="groupMembers" TItem="UserDTO">
                <Template Context="user">
                    <RadzenLabel> @user.Name @user.Surname </RadzenLabel>
                </Template>
            </RadzenDataList>
        </RadzenColumn>

        <!-- Chat -->
        <RadzenColumn Size="7" Style="display: flex; flex-direction: column; height: 100%;">
            <h4>Group Chat</h4>

            <!-- Chat Message Container -->
            <div class="chat-box" @ref="chatContainer">
                @foreach (var msg in messages)
                {
                    var isUser = msg.UserID == AuthService.userDTO?.Id;
                    <div class="chat-message @(isUser ? "self" : "other")">
                        <div>
                            <div class="message-bubble">@msg.Text</div>
                            <div class="message-meta">@groupMembers.FirstOrDefault(u => u.Id == msg.UserID)?.Name</div>
                        </div>
                    </div>
                }
            </div>

            <!-- Input and Send -->
            <div style="display: flex; margin-top: auto; gap: 0.5rem; align-items: center;">
                <RadzenTextBox @bind-Value="messageText" Style="flex: 1;" Placeholder="Type a message..." />
                <RadzenButton Text="Send" Click="SendMessageAsync" />
            </div>
        </RadzenColumn>

        <!-- Tasks -->
        <RadzenColumn Size="3" Style="overflow-y: auto; height: 100%;">
            <RadzenRow>
                <h4>Group Tasks</h4>
                @if (groupAdmins?.Any(admin => admin.Id == AuthService.userDTO?.Id) == true)
                {
                    <RadzenButton Icon="add_circle" ButtonStyle="ButtonStyle.Primary" Click="()=> AddTask()" />
                }
            </RadzenRow>

            <RadzenDataList Data="groupTasks" TItem="TaskDTO" class="tasks">
                <Template Context="task">
                    <div style="display: flex; flex-direction: column;">
                        <span>
                            @task.Title
                            <RadzenButton style="float:right" Icon="report" ButtonStyle="ButtonStyle.Info" Click="()=> SeeDetails(task)" />
                        </span>
                        <span style="font-size:smaller">
                            Owner: @groupMembers.FirstOrDefault(item => item.Id == task.TaskRecipient)?.Name @groupMembers.FirstOrDefault(item => item.Id == task.TaskRecipient)?.Surname
                        </span>
                        <span style="font-size:smaller">Deadline: @task.DeadlineTime.Day / @task.DeadlineTime.Month</span>
                    </div>
                </Template>
            </RadzenDataList>
        </RadzenColumn>

    </RadzenRow>
</RadzenCard>

@code {
    [Parameter]
    public int GroupId { get; set; }

    private GroupDTO Group = new();
    private List<UserDTO>? groupMembers = new();
    private List<TaskDTO>? groupTasks = new();
    private List<UserDTO>? groupAdmins = new();
    private List<GroupMessageDTO> messages = new();

    private string messageText = string.Empty;
    private HubConnection? hubConnection;
    private ElementReference chatContainer;

    protected override async Task OnInitializedAsync()
    {
        await InitializeSignalR(); // Create and configure the SignalR connection ONCE
    }


    protected override async Task OnParametersSetAsync()
    {
        await LoadData();        // reload group and members
        await LoadMessages();    // reload messages from API
        await RestartSignalR();  // reconnect to SignalR for this new group
    }

    private async Task LoadData()
    {
        Group = await ApiServiceGroup.GetResource($"/api/Group/{GroupId}");
        groupMembers = Group?.Users.ToList() ?? new List<UserDTO>();
        groupTasks = await ApiServiceTask.GetResources($"/api/Task/GetByGroup/{GroupId}");
        groupAdmins = await ApiServiceUser.GetResources($"/api/GroupUser/GetAdmins/{GroupId}");
    }

    private async Task LoadMessages()
    {
        messages = await Http.GetFromJsonAsync<List<GroupMessageDTO>>($"/api/GroupMessage/GetByGroup/{GroupId}") ?? new();
    }

    private async Task SendMessageAsync()
    {
        if (string.IsNullOrWhiteSpace(messageText)) return;

        var newMessage = new GroupMessageDTO
            {
                Text = messageText,
                CreationDate = DateTime.UtcNow,
                GroupID = Group.Id,
                UserID = AuthService.userDTO!.Id,
                Group = Group,
                User = AuthService.userDTO,
                IsDeleted = false
            };

        await hubConnection.SendAsync("SendMessage", newMessage);
    }

    private async Task InitializeSignalR()
    {
        if (hubConnection == null)
        {
            hubConnection = new HubConnectionBuilder()
                .WithUrl($"https://localhost:7243/groupchathub?groupId={GroupId}")
                .WithAutomaticReconnect()
                .Build();

            hubConnection.On<GroupMessageDTO>("ReceiveMessage", (message) =>
            {
                messages.Add(message);
                InvokeAsync(StateHasChanged);
            });
        }
    }

    private async Task RestartSignalR()
    {
        if (hubConnection != null && hubConnection.State == HubConnectionState.Connected)
        {
            await hubConnection.StopAsync();
            await hubConnection.DisposeAsync();
            hubConnection = null;
        }

        hubConnection = new HubConnectionBuilder()
            .WithUrl($"https://localhost:7070/groupchathub?groupId={GroupId}")
            .WithAutomaticReconnect()
            .Build();

        hubConnection.On<GroupMessageDTO>("ReceiveMessage", (message) =>
        {
            messages.Add(message);
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }


    private async void SeeDetails(TaskDTO task)
    {
        var result = await DialogService.OpenAsync<TaskDialog>("Task", new Dictionary<string, object> { { "task", task } }, new DialogOptions { Width = "700px", Height = "512px" });
    }

    private async void AddTask()
    {
        var result = await DialogService.OpenAsync<AddTaskDialog>("Add Task", new Dictionary<string, object> { { "group", Group } }, new DialogOptions { Width = "700px", Height = "512px" });

        if (result == true)
        {
            await LoadData();
            StateHasChanged();
        }
    }
}
