@page "/special_groups"

@using ClassLibrary.DTO
@using OMPWebApp.Services

@inject DialogService DialogService
@inject AuthorizationService AuthService
@inject ApiConnectionService<UserDTO> ApiServiceUser
@inject ApiConnectionService<SpecialGroupDTO> ASSpecialGroup
<RadzenCard>
    <h3>Special Group Manager</h3>
<div class="rz-p-4 rz-text-align-left">
    <RadzenButton Text="Add Group" ButtonStyle="ButtonStyle.Secondary" Click=@NewGroupDialog />
</div>

<RadzenDataGrid TItem="SpecialGroupDTO" Data="@Groups" Editable="true" Style="width: 60%;" AllowFiltering="false" PageSize="15" AllowPaging="true" AllowSorting="false">
    <Columns>

        <RadzenDataGridColumn TItem="SpecialGroupDTO" Property="Title" Title="Title" />
        <RadzenDataGridColumn TItem="SpecialGroupDTO" Property="Description" Title="Description" />
        <RadzenDataGridColumn TItem="SpecialGroupDTO" Title="Edit" Width="100px">
            <Template Context="group">
                <RadzenButton Text="Edit" Style="margin-left: 5px;" ButtonStyle="ButtonStyle.Primary"
                              Click="@(async () => await EditGroupDialog(group))" />
            </Template>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="SpecialGroupDTO" Title="Manage" Width="120px">
            <Template Context="group">
                <RadzenButton Text="Manage" Style="margin-left: 5px;" ButtonStyle="ButtonStyle.Base"
                              Click="@(async () => await ManageGroup(group))" />
            </Template>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="SpecialGroupDTO" Title="Delete" Width="120px">
            <Template Context="group">
                <RadzenButton Text="Delete" Style="margin-left: 5px;" ButtonStyle="ButtonStyle.Danger"
                              Click="@(async () => await DeleteGroup(group))" />
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>
</RadzenCard>
@code {
    List<SpecialGroupDTO>? Groups = new();


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await LoadData();
    }

    private async Task LoadData()
    {
        Groups = await ASSpecialGroup.GetResources($"/api/SpecialGroup/GetByCustomer/{AuthService.userDTO.CustomerId}");
    }

    public async Task NewGroupDialog()
    {
        await DialogService.OpenAsync<AddSpecialGroupDialog>("Add Group", new Dictionary<string, object>(), new DialogOptions()
            {
                Width = "700px",
                Height = "512px"
            });
        await LoadData();
    }

    private async Task EditGroupDialog(SpecialGroupDTO group)
    {
        await DialogService.OpenAsync<EditSpecialGroupDialog>("Edit Group",
        new Dictionary<string, object>()
                        {
            {"group", group },
                        },
        new DialogOptions()
            {
                Width = "700px",
                Height = "512px"
            });
        await LoadData();
    }

    private async Task ManageGroup(SpecialGroupDTO group)
    {
        await DialogService.OpenAsync<ManageSpecialGroupDialog>("Manage Group",
        new Dictionary<string, object>()
                            {
            {"group", group },
                            },
        new DialogOptions()
            {
                Width = "1000px",
                Height = "512px"
            });
        await LoadData();
    }

    private async Task DeleteGroup(SpecialGroupDTO group)
    {
        if (group == null)
        {
            return;
        }

        group.IsDeleted = true;
        group.DeleteDate = DateTime.Now;
        await ASSpecialGroup.PutResource($"/api/SpecialGroup/{group.Id}", group);

        Groups.Remove(group);
        await LoadData();
    }
}
