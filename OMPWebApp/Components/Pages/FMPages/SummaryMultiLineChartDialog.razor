@page "/summary-balance-chart"
@using ClassLibrary.DTO
@using OMPWebApp.Services
@inject ApiConnectionService<CurrencyDTO> ApiServiceCurrency

<RadzenCard>
    <h3>Monthly Financial Balance Chart</h3>

    <div class="row mb-3">
        <div class="col-md-3">
            <RadzenLabel Text="Display Currency" />
            <RadzenDropDown @bind-Value="selectedCurrencyCode"
                            Data="@currencies"
                            TextProperty="Code"
                            ValueProperty="Code"
                            Style="width: 100%;"
                            Change="@OnCurrencyChanged" />
        </div>
    </div>

    <RadzenChart Style="height: 400px;">
        <RadzenLineSeries Data="@ChartData" CategoryProperty="MonthLabel" ValueProperty="Income" Title="Income" LineType="LineType.Solid" >
            <RadzenMarkers Visible="@showMarkers" MarkerType="MarkerType.Circle" />
        </RadzenLineSeries>
        <RadzenLineSeries Data="@ChartData" CategoryProperty="MonthLabel" ValueProperty="Cost" Title="Cost" LineType="LineType.Dashed" >
            <RadzenMarkers Visible="@showMarkers" MarkerType="MarkerType.Circle" />
        </RadzenLineSeries>
        <RadzenLineSeries Data="@ChartData" CategoryProperty="MonthLabel" ValueProperty="Payroll" Title="Payroll" LineType="LineType.Dotted" >
            <RadzenMarkers Visible="@showMarkers" MarkerType="MarkerType.Circle" />
        </RadzenLineSeries>
        <RadzenLineSeries Data="@ChartData" CategoryProperty="MonthLabel" ValueProperty="DebitNote" Title="Debit Note" LineType="LineType.Solid" >
            <RadzenMarkers Visible="@showMarkers" MarkerType="MarkerType.Circle" />
        </RadzenLineSeries>

        <RadzenCategoryAxis>
            <RadzenAxisTitle Text="Month"></RadzenAxisTitle>
        </RadzenCategoryAxis>
        <RadzenValueAxis>
            <RadzenAxisTitle Text="@selectedCurrency?.Code"></RadzenAxisTitle>
            <RadzenGridLines Visible="true" />
        </RadzenValueAxis>
    </RadzenChart>
</RadzenCard>

@code {
    [Parameter] public List<FMSummaryDTO> Incomes { get; set; } = new();
    [Parameter] public List<FMSummaryDTO> Costs { get; set; } = new();
    [Parameter] public List<FMSummaryDTO> Payrolls { get; set; } = new();
    [Parameter] public List<FMSummaryDTO> DebitNotes { get; set; } = new();

    private List<CurrencyDTO> currencies = new();
    private string selectedCurrencyCode = "USD";
    private CurrencyDTO? selectedCurrency;
    bool showMarkers = true;
    private List<MonthlyBalance> ChartData = new();

    public class MonthlyBalance
    {
        public string MonthLabel { get; set; } = "";
        public decimal Income { get; set; }
        public decimal Cost { get; set; }
        public decimal Payroll { get; set; }
        public decimal DebitNote { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        currencies = await ApiServiceCurrency.GetResources("/api/Currency");
        selectedCurrency = currencies.FirstOrDefault(c => c.Code == selectedCurrencyCode);
        CalculateChartData();
    }

    private void OnCurrencyChanged(object value)
    {
        selectedCurrencyCode = value?.ToString() ?? "USD";
        selectedCurrency = currencies.FirstOrDefault(c => c.Code == selectedCurrencyCode);
        CalculateChartData();
    }

    private void CalculateChartData()
    {
        var allDates = Incomes.Concat(Costs).Concat(Payrolls).Concat(DebitNotes)
                              .Where(x => x.CreationDate != null)
                              .Select(x => new DateTime(x.CreationDate!.Value.Year, x.CreationDate!.Value.Month, 1))
                              .Distinct()
                              .OrderBy(d => d)
                              .ToList();

        ChartData = allDates.Select(month =>
        {
            var incomeSum = Incomes.Where(x => IsSameMonth(x.CreationDate, month))
                                   .Sum(x => ConvertCurrency(x.Netto ?? 0, x.CurrencyId));

            var costSum = Costs.Where(x => IsSameMonth(x.CreationDate, month))
                               .Sum(x => ConvertCurrency(x.Netto ?? 0, x.CurrencyId));

            var payrollSum = Payrolls.Where(x => IsSameMonth(x.CreationDate, month))
                                     .Sum(x => ConvertCurrency(x.Netto ?? 0, x.CurrencyId));

            var debitNoteSum = DebitNotes.Where(x => IsSameMonth(x.CreationDate, month))
                                         .Sum(x => ConvertCurrency(x.Netto ?? 0, x.CurrencyId));

            return new MonthlyBalance
                {
                    MonthLabel = month.ToString("MMM yyyy"),
                    Income = incomeSum,
                    Cost = -costSum,
                    Payroll = -payrollSum,
                    DebitNote = -debitNoteSum
                };
        }).ToList();
    }

    private bool IsSameMonth(DateTime? date, DateTime target)
        => date.HasValue && date.Value.Year == target.Year && date.Value.Month == target.Month;

    private decimal ConvertCurrency(decimal amount, int? fromCurrencyId)
    {
        var fromCurrency = currencies.FirstOrDefault(c => c.Id == fromCurrencyId);
        if (fromCurrency == null || selectedCurrency == null)
            return amount;

        if (fromCurrency.Id == selectedCurrency.Id)
            return amount;

        decimal usd = amount / fromCurrency.ExchangeRateToDollar;
        decimal converted = usd * selectedCurrency.ExchangeRateToDollar;
        return Math.Round(converted, 2);
    }
}
