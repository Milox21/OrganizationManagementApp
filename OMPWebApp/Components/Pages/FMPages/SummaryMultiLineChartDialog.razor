@page "/summary-balance-chart"
@using ClassLibrary.DTO
@using OMPWebApp.Services
@inject ApiConnectionService<CurrencyDTO> ApiServiceCurrency

<RadzenCard>
    <h3>Monthly Financial Balance Chart</h3>

    <div class="row mb-3">
        <div class="col-md-3">
            <RadzenLabel Text="Display Currency" />
            <RadzenDropDown @bind-Value="selectedCurrencyCode"
                            Data="@currencies"
                            TextProperty="Code"
                            ValueProperty="Code"
                            Style="width: 100%;"
                            Change="@OnCurrencyChanged" />
        </div>
    </div>

    <RadzenChart Style="height: 400px;">
        <RadzenLineSeries Data="@ChartData" CategoryProperty="MonthLabel" ValueProperty="Income" Title="Income" LineType="LineType.Solid" >
            <RadzenMarkers Visible="@showMarkers" MarkerType="MarkerType.Circle" />
        </RadzenLineSeries>
        <RadzenLineSeries Data="@ChartData" CategoryProperty="MonthLabel" ValueProperty="Cost" Title="Cost" LineType="LineType.Dashed" >
            <RadzenMarkers Visible="@showMarkers" MarkerType="MarkerType.Circle" />
        </RadzenLineSeries>
        <RadzenLineSeries Data="@ChartData" CategoryProperty="MonthLabel" ValueProperty="Payroll" Title="Payroll" LineType="LineType.Dotted" >
            <RadzenMarkers Visible="@showMarkers" MarkerType="MarkerType.Circle" />
        </RadzenLineSeries>
        <RadzenLineSeries Data="@ChartData" CategoryProperty="MonthLabel" ValueProperty="DebitNote" Title="Debit Note" LineType="LineType.Solid" >
            <RadzenMarkers Visible="@showMarkers" MarkerType="MarkerType.Circle" />
        </RadzenLineSeries>

        <RadzenCategoryAxis>
            <RadzenAxisTitle Text="Month"></RadzenAxisTitle>
        </RadzenCategoryAxis>
        <RadzenValueAxis>
            <RadzenAxisTitle Text="@selectedCurrency?.Code"></RadzenAxisTitle>
            <RadzenGridLines Visible="true" />
        </RadzenValueAxis>
    </RadzenChart>
</RadzenCard>

@code {
    [Parameter] public List<FMSummaryDTO> Incomes { get; set; } = new();
    [Parameter] public List<FMSummaryDTO> Costs { get; set; } = new();
    [Parameter] public List<FMSummaryDTO> Payrolls { get; set; } = new();
    [Parameter] public List<FMSummaryDTO> DebitNotes { get; set; } = new();

    [Parameter] public DateTime startDate { get; set; } = new();
    [Parameter] public DateTime endDate { get; set; } = new();

    private List<CurrencyDTO> currencies = new();
    private string selectedCurrencyCode = "USD";
    private CurrencyDTO? selectedCurrency;
    bool showMarkers = true;
    private List<MonthlyBalance> ChartData = new();

    public class MonthlyBalance
    {
        public string MonthLabel { get; set; } = "";
        public decimal Income { get; set; }
        public decimal Cost { get; set; }
        public decimal Payroll { get; set; }
        public decimal DebitNote { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        currencies = await ApiServiceCurrency.GetResources("/api/Currency");
        selectedCurrency = currencies.FirstOrDefault(c => c.Code == selectedCurrencyCode);
        CalculateChartData();
    }

    private void OnCurrencyChanged(object value)
    {
        selectedCurrencyCode = value?.ToString() ?? "USD";
        selectedCurrency = currencies.FirstOrDefault(c => c.Code == selectedCurrencyCode);
        CalculateChartData();
    }

    private void CalculateChartData()
    {
        var monthList = new List<DateTime>();
        var current = new DateTime(startDate.Year, startDate.Month, 1);
        var end = new DateTime(endDate.Year, endDate.Month, 1);

        while (current <= end)
        {
            monthList.Add(current);
            current = current.AddMonths(1);
        }

        var incomeByMonth = Incomes
            .Where(x => x.CreationDate != null)
            .GroupBy(x => new DateTime(x.CreationDate!.Value.Year, x.CreationDate.Value.Month, 1))
            .ToDictionary(g => g.Key, g => g.Sum(x => ConvertCurrency(x.Netto ?? 0, x.CurrencyId)));

        var costByMonth = Costs
            .Where(x => x.CreationDate != null)
            .GroupBy(x => new DateTime(x.CreationDate!.Value.Year, x.CreationDate.Value.Month, 1))
            .ToDictionary(g => g.Key, g => g.Sum(x => ConvertCurrency(x.Netto ?? 0, x.CurrencyId)));

        var debitByMonth = DebitNotes
            .Where(x => x.CreationDate != null)
            .GroupBy(x => new DateTime(x.CreationDate!.Value.Year, x.CreationDate.Value.Month, 1))
            .ToDictionary(g => g.Key, g => g.Sum(x => ConvertCurrency(x.Netto ?? 0, x.CurrencyId)));

        var payrollByMonth = new Dictionary<DateTime, decimal>();
        foreach (var payroll in Payrolls.Where(p => p.CreationDate != null))
        {
            var start = new DateTime(payroll.CreationDate!.Value.Year, payroll.CreationDate.Value.Month, 1);
            var amount = ConvertCurrency(payroll.Netto ?? 0, payroll.CurrencyId);

            var month = start;
            while (month <= end)
            {
                if (!payrollByMonth.ContainsKey(month))
                    payrollByMonth[month] = 0;
                payrollByMonth[month] += amount;

                month = month.AddMonths(1);
            }
        }

        ChartData = monthList
    .Select(month => new MonthlyBalance
        {
            MonthLabel = month.ToString("MMM yyyy"),
            Income = incomeByMonth.TryGetValue(month, out var income) ? income : 0,
            Cost = costByMonth.TryGetValue(month, out var cost) ? cost : 0,
            Payroll = payrollByMonth.TryGetValue(month, out var payroll) ? payroll : 0,
            DebitNote = debitByMonth.TryGetValue(month, out var debit) ? debit : 0
        })
    .Where(mb => mb.Income != 0 || mb.Cost != 0 || mb.Payroll != 0 || mb.DebitNote != 0) // 🔥 Only include if at least one value is non-zero
    .ToList();
    }

    private bool IsSameMonth(DateTime? date, DateTime target)
        => date.HasValue && date.Value.Year == target.Year && date.Value.Month == target.Month;

    private decimal ConvertCurrency(decimal amount, int? fromCurrencyId)
    {
        var fromCurrency = currencies.FirstOrDefault(c => c.Id == fromCurrencyId);
        if (fromCurrency == null || selectedCurrency == null)
            return amount;

        if (fromCurrency.Id == selectedCurrency.Id)
            return amount;

        decimal usd = amount / fromCurrency.ExchangeRateToDollar;
        decimal converted = usd * selectedCurrency.ExchangeRateToDollar;
        return Math.Round(converted, 2);
    }
}
