@page "/fm_invoiceincome"

@using ClassLibrary.DTO
@using OMPWebApp.Services

@inject ApiConnectionService<InvoiceIncomeDTO> ApiServiceInvoice
@inject ApiConnectionService<CurrencyDTO> ApiServiceCurrency
@inject ApiConnectionService<InvoiceTaxRateDTO> ApiServiceTax
@inject AuthorizationService AuthService
<RadzenCard>
    <h4>Add New Invoice (Income)</h4>

    <RadzenTemplateForm Data="@newIncome" TItem="InvoiceIncomeDTO" Submit="@AddInvoiceIncome">

        <div class="row mb-3"> 
            <div class="col-md-6"> 
                <RadzenTextBox @bind-Value="newIncome.Name" Placeholder="Name" Style="width: 100%;" />
            </div>
            <div class="col-md-3"> 
                <RadzenTextBox @bind-Value="newIncome.Unit" Placeholder="Unit" Style="width: 100%;" />
            </div>
        </div>

        <div class="row mb-3"> 
            <div class="col-md-3"> 
                <RadzenNumeric TValue="decimal" @bind-Value="newIncome.Quantity" Placeholder="Quantity" Style="width: 100%;" />
            </div>
            <div class="col-md-3"> 
                <RadzenNumeric TValue="decimal" @bind-Value="newIncome.PriceNetto" Placeholder="Price Netto" Style="width: 100%;" />
            </div>
            <div class="col-md-3"> 
                <RadzenDropDown TValue="decimal?" @bind-Value="newIncome.VatTaxRate"
                Data="@vatDropdownItems"
                TextProperty="Display"
                ValueProperty="Rate"
                Placeholder="VAT %"
                Style="width: 100%;" />
            </div>
            <div class="col-md-3"> 
                <RadzenDropDown TValue="int?" @bind-Value="newIncome.CurrencyId"
                Data="@currencies"
                TextProperty="Code"
                ValueProperty="Id"
                Placeholder="Currency"
                Style="width: 100%;" />
            </div>
        </div>

        <div class="row">
            <div class="col-md-2">
                <RadzenButton Text="@(isEditMode ? "Edit Invoice" : "Add Invoice")"
                ButtonStyle="ButtonStyle.Primary"
                Type="Submit" />
            </div>
            @if (isEditMode)
            {
                <div class="col-md-1">
                    <RadzenButton Text="Cancel"
                    ButtonStyle="ButtonStyle.Warning"
                    Click="@CancelEdit" />
                </div>
            }
        </div>

    </RadzenTemplateForm>
</RadzenCard>

<RadzenCard Style="margin-top: 50px">
    <h3>Invoice (Income)</h3>

    <RadzenDataGrid TItem="InvoiceIncomeDTO" Data="@invoiceIncomes" AllowPaging="true" AllowFiltering="true" PageSize="10" AllowSorting="true">
        <Columns>
            <RadzenDataGridColumn TItem="InvoiceIncomeDTO" Property="Name" Title="Name" />
            <RadzenDataGridColumn TItem="InvoiceIncomeDTO" Property="Unit" Title="Unit" />
            <RadzenDataGridColumn TItem="InvoiceIncomeDTO" Property="Quantity" Title="Quantity" />
            <RadzenDataGridColumn TItem="InvoiceIncomeDTO" Property="PriceNetto" Title="Price Netto" />
            <RadzenDataGridColumn TItem="InvoiceIncomeDTO" Property="ValueNetto" Title="Netto Value" />
            <RadzenDataGridColumn TItem="InvoiceIncomeDTO" Property="VatTaxRate" Title="VAT %" />
            <RadzenDataGridColumn TItem="InvoiceIncomeDTO" Property="VatTaxValue" Title="VAT Value" />
            <RadzenDataGridColumn TItem="InvoiceIncomeDTO" Property="ValueBrutto" Title="Brutto" />
            <RadzenDataGridColumn TItem="InvoiceIncomeDTO" Property="CurrencyCode" Title="Currency" />
            <RadzenDataGridColumn Width="50px" TItem="InvoiceIncomeDTO" Filterable="false" Title="">
                <Template Context="ct">
                    <RadzenButton Icon="edit" Size="ButtonSize.Small"
                    Click="@(args => EditInvoice(ct))"
                    Style="margin-right: 0.5rem;" />
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn Width="50px" TItem="InvoiceIncomeDTO" Filterable="false" Title="">
                <Template Context="ct">
                    <RadzenButton Icon="delete" Size="ButtonSize.Small"
                    Click="@(args => DeleteInvoice(ct))"
                    Style="margin-right: 0.5rem;" />
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn Width="50px" TItem="InvoiceIncomeDTO" Filterable="false" Title="">
                <Template Context="ct">
                    <RadzenButton Icon="repeat" Size="ButtonSize.Small"
                    Click="@(args => MakeRecurring(ct))"
                    Style="margin-right: 0.5rem;" />
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
</RadzenCard>

@code {
    private List<InvoiceIncomeDTO> invoiceIncomes = new();
    private List<CurrencyDTO> currencies = new();
    private List<InvoiceTaxRateDTO> vatTaxRates = new();
    private List<int?> vatTaxValues = new();
    private InvoiceIncomeDTO newIncome = new();

    private bool isEditMode = false;

    private List<VatDropdownItem> vatDropdownItems => vatTaxRates
    .Select(x => new VatDropdownItem
        {
            Id = x.Id,
            Display = $"{x.Title} ({Math.Round(x.Rate, 2)}%)",
            Rate = x.Rate
        }).ToList();

    public class VatDropdownItem
    {
        public int Id { get; set; }
        public string Display { get; set; } = string.Empty;
        public decimal Rate { get; set; } 
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        InitNewIncome();
    }

    private async Task LoadData()
    {
        currencies = await ApiServiceCurrency.GetResources("/api/Currency");
        vatTaxRates = await ApiServiceTax.GetResources($"/api/Tax/GetInvoiceTaxRates/{AuthService.userDTO.CustomerId}");
        invoiceIncomes = await ApiServiceInvoice.GetResources($"/api/InvoiceIncome/GetAll/{AuthService.userDTO.CustomerId}");
        foreach (var income in invoiceIncomes)
        {
            income.CurrencyCode = currencies
                .FirstOrDefault(c => c.Id == income.CurrencyId)?.Code;
        }
    }

    private void InitNewIncome()
    {
        newIncome = new InvoiceIncomeDTO
            {
                CustomerId = AuthService.userDTO.CustomerId,
                CreationDate = DateTime.Now
            };
    }
    private async Task AddInvoiceIncome()
    {
        decimal selectedVatRate = (decimal)newIncome.VatTaxRate;

        if(newIncome.Id > 0)
        {
            newIncome.ValueNetto = newIncome.Quantity * newIncome.PriceNetto;
            newIncome.VatTaxValue = newIncome.ValueNetto * (newIncome.VatTaxRate / 100);
            newIncome.ValueBrutto = newIncome.ValueNetto + newIncome.VatTaxValue;

            await ApiServiceInvoice.PutResource("/api/InvoiceIncome/Update", newIncome);
        }
        else
        {
            if (newIncome.Quantity > 0 && newIncome.PriceNetto > 0)
            {
                newIncome.ValueNetto = newIncome.Quantity * newIncome.PriceNetto;
                newIncome.VatTaxValue = newIncome.ValueNetto * (newIncome.VatTaxRate / 100);
                newIncome.ValueBrutto = newIncome.ValueNetto + newIncome.VatTaxValue;
            }
            else
            {
                newIncome.ValueNetto = 0;
                newIncome.VatTaxRate = 0;
                newIncome.ValueBrutto = 0;
            }

            await ApiServiceInvoice.PostResource("/api/InvoiceIncome/Create", newIncome);
        }

        
        InitNewIncome();
        await LoadData();
    }

    private void EditInvoice(InvoiceIncomeDTO cost)
    {
        newIncome = cost;
        isEditMode = true;
    }

    private void CancelEdit()
    {
        InitNewIncome(); // lub stwórz nowy obiekt InvoiceIncomeDTO
        isEditMode = false;
    }

    private async Task DeleteInvoice(InvoiceIncomeDTO cost)
    {
        await ApiServiceInvoice.DeleteResource($"/api/InvoiceCost/Delete/{cost.Id}");
        await LoadData();
    }

    private void MakeRecurring(InvoiceIncomeDTO cost)
    {
        // Tu dodaj logikę do oznaczenia faktury jako cyklicznej (lub przekierowanie itp.)
        Console.WriteLine($"Make recurring for: {cost.Name}");
    }
}
