@page "/useradmin"
@using ClassLibrary.DTO
@using OMPWebApp.Services

@inject DialogService DialogService
@inject AuthorizationService AuthService
@inject ApiConnectionService<UserDTO> ApiServiceUser
@inject ApiConnectionService<PositionDTO> ApiServicePosition

<RadzenDataGrid Data="@Users" TItem="UserDTO" AllowVirtualization="true" Style="height:800px"
AllowFiltering="true" FilterPopupRenderMode="PopupRenderMode.OnDemand" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" LogicalFilterOperator="LogicalFilterOperator.Or"
AllowSorting="true" EditMode="Radzen.DataGridEditMode.Single" RowUpdate="OnUpdateRow">
    <Columns>
        <RadzenDataGridColumn TItem="UserDTO" Property="Name" Title="Name" Width="200px">
            <EditTemplate Context="user">
                <RadzenTextBox @bind-Value="user.Name" Style="width: 100%;" />
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="UserDTO" Property="Surname" Title="Surname" Width="200px">
            <EditTemplate Context="user">
                <RadzenTextBox @bind-Value="user.Surname" Style="width: 100%;" />
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="UserDTO" Property="Position.Name" Title="Position" Width="150px">
            <EditTemplate Context="user">
                <RadzenTextBox @bind-Value="user.Position.Name" Style="width: 100%;" />
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="UserDTO" Property="CreationDate" Title="Creation Date" Width="150px">
            <EditTemplate Context="user">
                <RadzenDatePicker @bind-Value="user.CreationDate" Style="width: 100%;" />
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="UserDTO" Property="EditDate" Title="Last Edit Date" Width="150px">
            <EditTemplate Context="user">
                <RadzenDatePicker @bind-Value="user.EditDate" Style="width: 100%;" />
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="UserDTO" Title="Edit" Width="100px">
            <Template Context="user">
                <RadzenButton Text="Edit" Style="margin-left: 5px;" ButtonStyle="ButtonStyle.Primary"
                Click="@(async () => await EditUserDialog(user))" />
            </Template>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="UserDTO" Title="Delete" Width="120px">
            <Template Context="user">
                <RadzenButton Text="Delete" Style="margin-left: 5px;" ButtonStyle="ButtonStyle.Danger"
                Click="@(async () => await DeleteUser(user))" />
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {
    List<UserDTO>? Users = new();


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Users = await ApiServiceUser.GetResources($"/api/User/GetByCustomer/{AuthService.userDTO.CustomerId}");
    }

    private async Task OnUpdateRow(UserDTO user)
    {
        if (user == null)
        {
            return;
        }
        await ApiServiceUser.PutResource($"/api/User/{user.Id}", user);
    }

    private async Task EditUserDialog(UserDTO user)
    {
        IEnumerable<PositionDTO> positions = await ApiServicePosition.GetResources($"/api/Position/GetByCustomer/{AuthService.userDTO.CustomerId}");
        var result = await DialogService.OpenAsync<EditUserDialog>("Edit User",
        new Dictionary<string, object>()
                {
            {"user", user },
            {"positions", positions }
                },
        new DialogOptions()
            {
                Width = "700px",
                Height = "512px"
            });

        if (result == true)
        {
            Users = await ApiServiceUser.GetResources($"/api/User/GetByCustomer/{AuthService.userDTO.CustomerId}");
            StateHasChanged();
        }

    }

    private async Task DeleteUser(UserDTO user)
    {
        if (user == null)
        {
            return;
        }

        user.IsDeleted = true;
        user.DeleteDate = DateTime.Now;
        await ApiServiceUser.PutResource($"/api/User/{user.Id}", user);

        Users.Remove(user);
        StateHasChanged();
    }
}
