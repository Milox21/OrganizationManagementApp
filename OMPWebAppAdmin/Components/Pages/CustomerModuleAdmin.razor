@page "/CustomerModuleAdmin"
@using System.Collections.Generic
@using ClassLibrary.DTO
@using OMPWebAppAdmin.Services

@inject ApiConnectionService<CustomerDTO> ApiServiceCustomer
@inject ApiConnectionService<ModuleDTO> ApiServiceModule

<RadzenDataGrid Data="@Customers" AllowVirtualization="true" Style="height:400px"
                AllowFiltering="true" FilterPopupRenderMode="PopupRenderMode.OnDemand" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" LogicalFilterOperator="LogicalFilterOperator.Or"
                AllowSorting="true">
    <Columns>
        <RadzenDataGridColumn Property="@nameof(CustomerDTO.Name)" Title="Name" />
        @foreach (ModuleDTO module in Modules)
        {
            <RadzenDataGridColumn Title="@module.Name">
                <Template Context="customer">
                    @{
                        bool isToggled = customer.Modules.Any(m => m.Name == module.Name);
                    }
                    <RadzenToggleButton @bind-Value=@isToggled
                                        Change="@(async (value) => await UpdateModul(customer, module, (bool)value))"
                                        Text="@(isToggled ? "Has Access" : "Has Not Access" )" />
                </Template>
            </RadzenDataGridColumn>

        }
    </Columns>
</RadzenDataGrid>

@code {
    List<CustomerDTO>? Customers = new();
    List<ModuleDTO>? Modules = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Modules = await ApiServiceModule.GetResources("/api/Module");
        Customers = await ApiServiceCustomer.GetResources("/api/Customer");
    }

    private async Task UpdateModul(CustomerDTO customer, ModuleDTO module, bool isToggled)
    {
        if (isToggled)
        {
            if (!customer.Modules.Any(m => m.Id == module.Id))
            {
                customer.Modules.Add(module);
            }
        }
        else
        {
            // Remove the module from the customer's module list
            customer.Modules.Remove(customer.Modules.FirstOrDefault(m => m.Name == module.Name));
        }
        customer.Password = "";
        // Call your API to persist the changes
        await ApiServiceCustomer.PutResource($"/api/Customer/{customer.Id}", customer);
    }
}
